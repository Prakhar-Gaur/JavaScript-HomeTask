1 - Using closures to share class state



//solution//


var Cat = (function () {
 // ... your code here.
  
  
  const cats = [];
  
  const constructor = function (name, weight) 
  {
    if (!name || !weight) 
      throw Error('invalid parameters');
  
  
  
  
  Object.defineProperty(this, 'name', {
      get: function () { return name }
    });
    Object.defineProperty(this, 'weight', {
      get: function () { return weight },
      set: function (x) { weight = x; return weight }
    });
    cats.push(this);
    }

  constructor.averageWeight = () => cats.reduce((acc, cat) => (acc + cat.weight), 0) / cats.length

  return constructor
    
}());


2 - A Chain adding function


//solution//

function add(n){
  var f = function(x) {
    return add(n + x);
  };
  
  f.valueOf = function() {
    return n;
  };
  
  return f;
}


3 - Function Cache


//solution//

function cache(func) {
  const cachedResults = {};
  return (...args) => {
    const key = JSON.stringify(args);

    if (!(key in cachedResults)) {
      const result = func.apply(null, args);
      cachedResults[key] = result;
    }

    return cachedResults[key];
  };
}



4 - Function Composition

//solution//


function compose(f,g) {
  // Compose the two functions here!
  return function(...args) {
    return f(g(...args));
  }
}



5 - Function composition


//solution//


function compose(...func) {
  // Your solution
  
  return function(arg)
  {
    return func.reduceRight(function(res, fn){ return fn(res)}, arg);
  }
}